@startuml doc-files/lang04_03_design.png
actor User

  participant "WizardAction" as WizardAction 
  participant "frame : WizardFrame" as WizardFrame 
  participant "controller : WizardController" as WizardController 

  User -> WizardAction : starts use case
  create WizardFrame 
  WizardAction -> WizardFrame : new(UIController) 
  create WizardController 
  WizardFrame -> WizardController : new(UIController) 
  WizardFrame -> WizardController : getFunctions()
  WizardController -> Language : getInstance()
  WizardController -> Language : getFunctions()

  loop
  WizardFrame -> WizardFrame : displayInformation()
  end

  loop the User can keep selecting functions and setting parameters to build a formula
  User -> WizardFrame : Selects Function
  WizardFrame -> WizardController : getExpression(function)
  WizardFrame -> User : shows editable expression to user
  User -> WizardFrame : Sets parameters
  activate WizardFrame
  note right of WizardFrame : WizardFrame is listening to the formula text area\n(where the user builds the formula)\nand dynamically shows the result of the inserted formula
  WizardFrame -> WizardFrame : updateResultTextBox() 
  WizardFrame -> WizardController : String result = executeFormula(String expression)
  deactivate WizardFrame
  activate WizardController
  WizardController -> FormulaCompiler : getInstance()
  WizardController -> FormulaCompiler : Formula formula = compile()
  WizardController -> Formula : Value result = evaluate()
  deactivate WizardController
  WizardFrame -> User : shows the formula's result
  end

  User -> WizardFrame : Confirms the formula
  WizardFrame -> WizardController : setCellsFormula(String formula)
  WizardController -> UIController : Cell cell = getActiveCell()
  WizardController -> Cell : setContent(formula)
@enduml