/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csheets.ext.distributedWorkbook.ui;

import csheets.ext.distributedWorkbook.NetworkWorkbookSearchExtension;
import csheets.ext.distributedWorkbook.WorkBookDTO;
import csheets.framework.ObjectSerialization;
import csheets.support.Task;
import csheets.support.TaskManager;
import csheets.ui.ctrl.UIController;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JPanel;

/**
 *
 * @author RÃºben Teixeira 1140780@isep.ipp.pt
 */
public class NetworkWorkbookSearchPanel extends JPanel implements Observer {

	/**
	 * UI Controller
	 */
	private final UIController uiController;

	/**
	 * The distributed workbook search controller
	 */
	private final NetworkWorkbookSearchController controller;

	/**
	 * Default instance list
	 */
	private List<WorkBookDTO> resultList;

	/**
	 * Workbook name search pattern
	 */
	private String searchPattern;

	/**
	 * Task Manager
	 */
	private final TaskManager manager = new TaskManager();

	/**
	 * The search ending task
	 */
	private final Task stopTask;

	/**
	 * The search timeout
	 */
	private static final int SEARCH_TIMEOUT = 60;

	// @IMPROVEMENT: Needs to get the timer from the configuration.
	// Maybe get it through a configuration file?
	private static final int defaultSeconds = 10;

	/**
	 * List of found instances
	 */
	private List<String> instances;

	/**
	 * Request message to deliver to other instances
	 */
	private static final String REQUEST_MESSAGE = "Allow Network Workbook Search?";

	/**
	 * Creates new form WBSearchUI
	 *
	 * @param uiController The UIController
	 * @param controller the NetworkWorkbookSearchController
	 */
	public NetworkWorkbookSearchPanel(UIController uiController,
									  NetworkWorkbookSearchController controller) {
		setName(NetworkWorkbookSearchExtension.NAME);
		this.uiController = uiController;
		this.controller = controller;
		initComponents();
		resultList = new ArrayList<>();
		instances = new ArrayList<>();
		stopTask = new Task() {
			@Override
			public void fire() {
				stopSearch();
			}
		};
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSearchPattern = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jResultArea = new javax.swing.JTextArea();
        imgPanel = new javax.swing.JLabel();

        jSearchPattern.setText("Type a Worbook name search pattern...");
        jSearchPattern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSearchPatternActionPerformed(evt);
            }
        });
        jSearchPattern.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jSearchPatternKeyReleased(evt);
            }
        });

        searchButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        searchButton.setText("Search");
        searchButton.setEnabled(true);
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        cancelButton.setEnabled(false);

        jResultArea.setColumns(20);
        jResultArea.setRows(5);
        jResultArea.setEditable(false);
        jScrollPane2.setViewportView(jResultArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(8, 8, 8)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane2)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jSearchPattern, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(6, 6, 6)
                            .addComponent(cancelButton)))
                    .addGap(8, 8, 8)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 423, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jSearchPattern, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        imgPanel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imgPanel.setIcon(new ImageIcon(
            NetworkWorkbookSearchExtension.class.getResource("res/img/spinner.gif")));
    imgPanel.setVisible(false);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addComponent(imgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(imgPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGap(33, 33, 33))
    );
    }// </editor-fold>//GEN-END:initComponents

    private void jSearchPatternActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSearchPatternActionPerformed
		// TODO add your handling code here:
    }//GEN-LAST:event_jSearchPatternActionPerformed

    private void jSearchPatternKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jSearchPatternKeyReleased
		// TODO add your handling code here:
		if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
			if (!jSearchPattern.getText().isEmpty()) {
				startSearch();
			}
		}
    }//GEN-LAST:event_jSearchPatternKeyReleased

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
		startSearch();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
		stopSearch();
    }//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel imgPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextArea jResultArea;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jSearchPattern;
    private javax.swing.JButton searchButton;
    // End of variables declaration//GEN-END:variables

	private void startSearch() {
		this.searchPattern = this.jSearchPattern.getText().trim();
		if (!this.searchPattern.isEmpty()) {
			this.imgPanel.setVisible(true);
			this.cancelButton.setEnabled(true);
			this.controller.restartUdpService(this, defaultSeconds);
			this.controller.restartTcpService(this, this.searchPattern);
			//this.controller.newRemoteSearch(uiController, searchPattern);

			manager.after(SEARCH_TIMEOUT).once(stopTask);
		} else {
			this.jResultArea.setText("Please type a search pattern.");
			this.jResultArea.setForeground(Color.red);
		}
	}

	private void stopSearch() {
		System.out.println("Stopping services...");
		this.controller.stopServices();
		this.imgPanel.setVisible(false);
		this.instances.clear();
		this.cancelButton.setEnabled(false);
		this.stopTask.kill();
//		if (this.) {
//
//		}
	}

	@Override
	public void update(Observable o, Object arg) {

		if (arg instanceof WorkBookDTO) {
			//TODO Result received
			System.out.println("Result received...");
			System.out.println(((WorkBookDTO) arg).toString());
		}

		if (arg instanceof List) {
			// List<String> adresses changed!
			List<String> addresses = (List<String>) arg;
			for (String address : addresses) {
				if (!this.instances.contains(address)) {
					this.instances.add(address);
					this.controller.initiateSearch(address, REQUEST_MESSAGE);
				} else {
					System.out.println(address + " was already contacted!");
				}
			}
		}

		if (arg instanceof String[]) {

			String[] search = (String[]) arg;
			System.out.println("Received search request: " + search[1]);
			List<WorkBookDTO> results = this.controller.
				newLocalSearch(uiController, search[1]);
			if (results != null && !results.isEmpty()) {
				for (WorkBookDTO result : results) {
					String serializedResult;
					try {
						serializedResult = ObjectSerialization.
							toString(result);
					} catch (Exception ex) {
						Logger.getLogger(NetworkWorkbookSearchPanel.class.
							getName()).
							log(Level.SEVERE, null, ex);
						return;
					}
					this.controller.
						sendSearchResult(search[2], serializedResult);
				}

			} else {
				//this.controller.sendSearchResult(search[2], "Didn't find");
			}
		}
	}
}
