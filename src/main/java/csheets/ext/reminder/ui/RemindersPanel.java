/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csheets.ext.reminder.ui;

import csheets.domain.Event;
import csheets.domain.Reminder;
import csheets.ext.events.EventsController;
import csheets.ext.events.ui.EventPanelSingle;
import csheets.ext.events.ui.TimedPopupDialog;
import csheets.ext.reminder.ReminderExtension;
import csheets.ext.reminder.RemindersControllers;
import csheets.framework.persistence.repositories.DataIntegrityViolationException;
import csheets.ui.ctrl.UIController;
import java.awt.GridLayout;
import java.util.Observable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Gabriel
 */
public class RemindersPanel extends javax.swing.JPanel {
    private RemindersControllers controller;
    /**
     * Creates new form NewJPanel
     */
    public RemindersPanel(UIController uiController) {
        this.setName(ReminderExtension.NAME);
        this.controller = new RemindersControllers(uiController, this);
        initComponents();
        this.update(null, null);
    }
    
	public void update(Observable o, Object arg) {
//		if (arg instanceof Event) {
//			Event event = (Event) arg;
//                        new TimedPopupDialog(null, "Reminder: " + controller, event);
//		} else {
			clearRemindersList();
			for (Reminder r : this.controller.allContacts()) {
                            ReminderSinglePanel panel = new ReminderSinglePanel(this.controller, r);
				this.addReminderPanel(panel);
			}
			this.jPanelReminders.revalidate();
			this.jPanelReminders.repaint();
//		}
	}

    private void addReminderPanel(ReminderSinglePanel panel) {
		this.jPanelReminders.add(panel);
		addGridRow();
	}

	/*
    * Deletes all information from event list.
	 */
	private void clearRemindersList() {
		this.jPanelReminders.removeAll();
		defaultGridRow();
	}

    /*
    * Layout specific: set's the default number of rows (5)
	 */
	private void defaultGridRow() {
		((GridLayout) this.jPanelReminders.getLayout()).setRows(3);
	}
        /*
    * Layout specific: add's a row to the panel's layout (to prevent adding a new colummn).
	 */
	private void addGridRow() {
		GridLayout layout = (GridLayout) this.jPanelReminders.getLayout();
		layout.setRows(layout.getRows() + 1);
	}
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanelReminders = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();

        jButton1.setText("jButton1");

        jPanelReminders.setLayout(new java.awt.GridLayout(5, 1));

        jButton2.setText("New Reminder");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                    .addComponent(jPanelReminders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelReminders, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            ReminderManager remMan= new ReminderManager(this.controller,null);
            int eventOption = JOptionPane.
			showConfirmDialog(null, remMan, "Create Reminder", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
		if (eventOption == JOptionPane.OK_OPTION) {
                try {
                    remMan.createReminder();
                    JOptionPane.showMessageDialog(remMan, "Sucess!");
                } catch (DataIntegrityViolationException ex) {
                    Logger.getLogger(RemindersPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
		}
            update(null, null);
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanelReminders;
    // End of variables declaration//GEN-END:variables
}
