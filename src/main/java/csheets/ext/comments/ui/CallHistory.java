/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csheets.ext.comments.ui;

import csheets.ext.comments.Comment;
import csheets.ext.comments.CommentableCell;
import csheets.ext.comments.CommentsExtension;
import csheets.ui.ctrl.UIController;
import java.awt.BorderLayout;
import java.util.List;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.JScrollPane;

/**
 *
 * @author Carlos Mateus
 */
public class CallHistory extends javax.swing.JDialog {

	private UIController uiController;
	/**
	 * The commentable cell currently being displayed in the panel
	 */
	private CommentableCell cell;

	/**
	 * The selected commentable cell's list of comments
	 */
	private List<CommentPanel> listComments;

	private Comment comment;

	/**
	 * The assertion controller
	 */
	private CommentController controller;

	private JPanel jPanel2;
	private BoxLayout layout;

	/**
	 * Creates new form CallHistory
	 */
	public CallHistory(java.awt.Frame parent, boolean modal,
					   UIController uiController, Comment comment) {
		super(parent, modal);
		this.uiController = uiController;
		initComponents();
		setName(CommentsExtension.NAME);
		initComponents();
		jPanel2 = new JPanel();
		layout = new BoxLayout(jPanel2, BoxLayout.Y_AXIS);
		jPanel2.setLayout(layout);

		JScrollPane scrollPane = new JScrollPane(jPanel2);
		scrollPane.
			setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
		scrollPane.
			setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
		//scrollPane.setBounds(50, 30, 300, 50);
		add(scrollPane, BorderLayout.CENTER);

		// Creates controller
		controller = new CommentController(uiController);
		this.comment = comment;
		// Creates comment components
//		CommentHistoryUI.ApplyAction applyAction = new CommentHistoryUI.ApplyAction();
		this.uiController = uiController;

		paintCommentPanels();

		//comment.setPreferredSize(new Dimension(120, 240));		// width, height
		//comment.setMaximumSize(new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE));		// width, height
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setLayout(new java.awt.BorderLayout());
        jPanel3.add(jSeparator2, java.awt.BorderLayout.LINE_END);

        jLabel1.setText("History of Comment");
        jPanel3.add(jLabel1, java.awt.BorderLayout.PAGE_START);

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 336, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 444, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables

	private void paintCommentPanels() {
		cleanCommentsPanel();
		jPanel2.setVisible(true);
		List<Comment> lstHistory = this.comment.commentHistory();
		for (Comment comment : lstHistory) {
			HistoryUI historyUI = new HistoryUI(uiController, comment);

			jPanel2.add(historyUI);
//			jTextField1.setText("");
			historyUI.setVisible(true);
		}
		refreshUI();
	}

	private void cleanCommentsPanel() {
		jPanel2.removeAll();
		refreshUI();
	}

	private void refreshUI() {
		revalidate();
		repaint();
	}
//	/**
//	 * Updates the comments field
//	 *
//	 * @param event the selection event that was fired
//	 */
//	@Override
//	public void selectionChanged(SelectionEvent event) {
//		Cell selectedCell = event.getCell();
//		if (selectedCell != null) {
//			CommentableCell activeCell
//				= (CommentableCell) selectedCell.
//				getExtension(CommentsExtension.NAME);
//			activeCell.addCommentableCellListener(this);
//
//			commentChanged(activeCell);
//		}
//
//		// Stops listening to previous active cell
//		if (event.getPreviousCell() != null) {
//			((CommentableCell) event.getPreviousCell().
//				getExtension(CommentsExtension.NAME))
//				.removeCommentableCellListener(this);
//		}
//	}
//
//	/**
//	 * Updates the comment field when the comments of the active cell is
//	 * changed.
//	 *
//	 * @param cell the cell whose comments changed
//	 */
//	@Override
//	public void commentChanged(CommentableCell cell) {
//		// Stores the cell for use when applying comments
//		this.cell = cell;
//
//		if (this.cell.hasComments()) {
//			paintCommentPanels();
//		} else {
//			cleanCommentsPanel();
//		}
//
//	}
//
//	private void paintCommentPanels() {
//		cleanCommentsPanel();
//		List<Comment> commentsList = controller.getCommentList(this.cell);
//		for (Comment comment : commentsList) {
//			CommentPanel cmtPanel = new CommentPanel(comment, uiController);
//
//			jPanel2.add(cmtPanel);
//			cmtPanel.setVisible(true);
//		}
//		refreshUI();
//	}
//
//	private void cleanCommentsPanel() {
//		jPanel2.removeAll();
//		refreshUI();
//	}
//
//	private void refreshUI() {
//		revalidate();
//		repaint();
//	}
//	protected class ApplyAction implements FocusListener {
//
//		@Override
//		public void focusGained(FocusEvent e) {
//
//		}
//
//		@Override
//		public void focusLost(FocusEvent e) {
//			newComment();
//		}
//
//	}
}
