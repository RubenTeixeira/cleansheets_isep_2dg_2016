/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csheets.ext.comments.ui;

import csheets.core.Cell;
import csheets.ext.comments.Comment;
import csheets.ext.comments.CommentableCell;
import csheets.ext.comments.CommentableCellListener;
import csheets.ext.comments.CommentsExtension;
import csheets.ui.ctrl.SelectionEvent;
import csheets.ui.ctrl.SelectionListener;
import csheets.ui.ctrl.UIController;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.GridLayout;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.util.List;
import javax.swing.JPanel;

/**
 *
 * @author Rafael
 */
public class CommentsPanel extends JPanel implements SelectionListener,
	CommentableCellListener {

	/**
	 * The commentable cell currently being displayed in the panel
	 */
	private CommentableCell cell;

	/**
	 * The selected commentable cell's list of comments
	 */
	private List<CommentPanel> listComments;

	/**
	 * The assertion controller
	 */
	private CommentController controller;

	private JPanel jPanel2;
	private GridLayout layout = new GridLayout(5, 1);

	/**
	 * Creates new form CommentsPanel
	 *
	 * @param uiController the UIController
	 */
	public CommentsPanel(UIController uiController) {
		setName(CommentsExtension.NAME);
		initComponents();

		jPanel2 = new JPanel(layout);

		add(jPanel2, BorderLayout.CENTER);

		// Creates controller
		controller = new CommentController(uiController);
		uiController.addSelectionListener(this);

		// Creates comment components
		CommentsPanel.ApplyAction applyAction = new CommentsPanel.ApplyAction();

		//comment.setPreferredSize(new Dimension(120, 240));		// width, height
		//comment.setMaximumSize(new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE));		// width, height
		jTextField1.addFocusListener(applyAction);
		jTextField1.setAlignmentX(Component.CENTER_ALIGNMENT);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 287, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 263, Short.MAX_VALUE)
        );

        setLayout(new java.awt.BorderLayout());

        jTextField1.setText("jTextField1");
        jPanel3.add(jTextField1);

        add(jPanel3, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

	/**
	 * Updates the comments field
	 *
	 * @param event the selection event that was fired
	 */
	@Override
	public void selectionChanged(SelectionEvent event) {
		Cell selectedCell = event.getCell();
		if (selectedCell != null) {
			CommentableCell activeCell
				= (CommentableCell) selectedCell.
				getExtension(CommentsExtension.NAME);
			activeCell.addCommentableCellListener(this);

			commentChanged(activeCell);
		}

		// Stops listening to previous active cell
		if (event.getPreviousCell() != null) {
			((CommentableCell) event.getPreviousCell().
				getExtension(CommentsExtension.NAME))
				.removeCommentableCellListener(this);
		}
	}

	/**
	 * Updates the comment field when the comments of the active cell is
	 * changed.
	 *
	 * @param cell the cell whose comments changed
	 */
	@Override
	public void commentChanged(CommentableCell cell) {
		// Stores the cell for use when applying comments
		this.cell = cell;

		if (this.cell.hasComments()) {
			paintCommentPanels();
		}

	}

	private void paintCommentPanels() {

//		this.jPanelContacts.removeAll();
//		((GridLayout) this.jPanelContacts.getLayout()).setRows(5);
//		for (Contact contact : this.controller.allContacts()) {
//			ContactsPanelSingle2 panel = new ContactsPanelSingle2(this.controller, contact);
//			this.jPanelContacts.add(panel);
//			GridLayout layout = (GridLayout) this.jPanelContacts.getLayout();
//			layout.setRows(layout.getRows() + 1);
//		}
//		this.jPanelContacts.revalidate();
//		this.jPanelContacts.repaint();
		jPanel2.removeAll();
		layout.setRows(5);
		List<Comment> commentsList = controller.getCommentList(this.cell);
		for (Comment comment : commentsList) {
			CommentPanel cmtPanel = new CommentPanel(comment.userName(), comment.
													 text());
			System.out.println("ADDING Panel for comment from " + comment.
				userName());

			jPanel2.add(cmtPanel);
			layout.setRows(layout.getRows() + 1);
			cmtPanel.setVisible(true);
		}
		refreshUI();
	}

	private void refreshUI() {
		revalidate();
		repaint();
	}

	protected class ApplyAction implements FocusListener {

		@Override
		public void focusGained(FocusEvent e) {

		}

		@Override
		public void focusLost(FocusEvent e) {
			// TODO Auto-generated method stub
			if (cell != null) {
				String comment = jTextField1.getText().trim();
				System.out.println("DEBUG: comment = " + comment);
				if (!comment.isEmpty() && !"".equalsIgnoreCase(comment)) {
					System.out.println("DEBUG: has comments... adComment()");
					controller.addComment(cell, jTextField1.getText());
				}
			}
		}
	}
}
