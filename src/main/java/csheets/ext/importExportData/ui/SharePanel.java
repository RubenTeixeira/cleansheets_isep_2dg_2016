/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package csheets.ext.importExportData.ui;

import csheets.core.Cell;
import csheets.core.formula.compiler.FormulaCompilationException;
import csheets.ext.cellsSharing.ShareExtension;
import csheets.support.TaskManager;
import csheets.ui.ctrl.SelectionEvent;
import csheets.ui.ctrl.SelectionListener;
import csheets.ui.ctrl.UIController;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 * A panel for share a cell
 *
 * @author Jos√© Barros
 */
public class SharePanel extends javax.swing.JPanel implements SelectionListener, Observer {

	private final UIController uiController;

	/**
	 * The assertion controller
	 */
	private ImportExportTextFileController controller;

	/**
	 * Cell selected
	 */
	private Cell[][] cells;

	/**
	 * Task Manager
	 */
	private final TaskManager manager = new TaskManager();

	/**
	 * Creates new form SharePanel
	 *
	 * @param uiController a ui controller
	 * @param controller Share cells controller.
	 */
	public SharePanel(UIController uiController,
					  ImportExportTextFileController controller) {
		this.uiController = uiController;

		setName(ShareExtension.NAME);

		initComponents();

		uiController.addSelectionListener(this);

		this.controller = controller;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        charLabel = new javax.swing.JLabel();
        headerLabel = new javax.swing.JLabel();
        helpNoteLabel = new javax.swing.JTextField();
        OKOptionsButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        headerCheckBox = new javax.swing.JCheckBox();
        separatorTextField = new javax.swing.JTextField();
        rangeOfCellsImportText = new javax.swing.JTextField();
        importFileButton = new javax.swing.JButton();
        filePathlabel = new javax.swing.JLabel();
        rangeOfCellsImportLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        charLabel1 = new javax.swing.JLabel();
        headerLabel1 = new javax.swing.JLabel();
        helpNoteLabel1 = new javax.swing.JTextField();
        OKOptionsButton1 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        headerCheckBox1 = new javax.swing.JCheckBox();
        separatorTextField1 = new javax.swing.JTextField();
        rangeOfCellsExportText = new javax.swing.JTextField();
        exportFileButton = new javax.swing.JButton();
        filePathlabel1 = new javax.swing.JLabel();
        rangeOfCellsExportLabel = new javax.swing.JLabel();

        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Import Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        charLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        charLabel.setText("Separator character:");

        headerLabel.setText("First Line Header:");

        helpNoteLabel.setEditable(false);
        helpNoteLabel.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        helpNoteLabel.setText("Must be special");
        helpNoteLabel.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        helpNoteLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpNoteLabelActionPerformed(evt);
            }
        });

        OKOptionsButton.setText("OK");
        OKOptionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKOptionsButtonActionPerformed(evt);
            }
        });

        headerCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headerCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(headerCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(separatorTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
                    .addComponent(rangeOfCellsImportText))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addComponent(separatorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(headerCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(rangeOfCellsImportText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        importFileButton.setText("IMPORT");
        importFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importFileButtonActionPerformed(evt);
            }
        });

        rangeOfCellsImportLabel.setText("Range of cells:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(charLabel)
                            .addComponent(headerLabel)
                            .addComponent(helpNoteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rangeOfCellsImportLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 3, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(OKOptionsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(importFileButton)
                        .addGap(167, 167, 167))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(filePathlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(36, 36, 36)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(charLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(helpNoteLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(headerLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rangeOfCellsImportLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(importFileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filePathlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OKOptionsButton))
        );

        jTabbedPane2.addTab("Import", jPanel4);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Export Options", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 13))); // NOI18N

        charLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        charLabel1.setText("Separator character:");

        headerLabel1.setText("First Line Header:");

        helpNoteLabel1.setEditable(false);
        helpNoteLabel1.setFont(new java.awt.Font("Tahoma", 1, 9)); // NOI18N
        helpNoteLabel1.setText("Must be special");
        helpNoteLabel1.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        helpNoteLabel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpNoteLabel1ActionPerformed(evt);
            }
        });

        OKOptionsButton1.setText("OK");
        OKOptionsButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKOptionsButton1ActionPerformed(evt);
            }
        });

        headerCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                headerCheckBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(rangeOfCellsExportText, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(headerCheckBox1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(separatorTextField1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                .addContainerGap(107, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addComponent(separatorTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(headerCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(rangeOfCellsExportText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        exportFileButton.setText("Export");
        exportFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportFileButtonActionPerformed(evt);
            }
        });

        rangeOfCellsExportLabel.setText("Range of cells:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(charLabel1)
                            .addComponent(headerLabel1)
                            .addComponent(helpNoteLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rangeOfCellsExportLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(OKOptionsButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(exportFileButton)
                        .addGap(167, 167, 167))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(filePathlabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(36, 36, 36)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(charLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(helpNoteLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(headerLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(rangeOfCellsExportLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(exportFileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filePathlabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(OKOptionsButton1))
        );

        jTabbedPane2.addTab("Export", jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private String getAddress(int column, int row) {
		String columnStr;
		int tempColumn = column;
		for (columnStr = ""; tempColumn >= 0; tempColumn = tempColumn
			/ ('Z' - 'A' + 1) - 1) {
			columnStr = (char) ((char) (tempColumn % ('Z'
				- 'A' + 1)) + 'A') + columnStr;
		}

		return columnStr + (row + 1);
	}

	private String getValue(String data) {
		String[] keys = data.split(";");

		if (keys.length == 1) {
			return "\"\"";
		}

		return "\"" + keys[1] + "\"";
	}

    private void importFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importFileButtonActionPerformed
		JFileChooser fc = new JFileChooser();
		FileFilter filter = new FileNameExtensionFilter("Text Files", "txt");
		fc.setFileFilter(filter);
		int returnVal = fc.showOpenDialog(fc);

		if (returnVal == JFileChooser.APPROVE_OPTION) {
			this.filePathlabel.setText(fc.getSelectedFile().getAbsolutePath());
		}

    }//GEN-LAST:event_importFileButtonActionPerformed

    private void helpNoteLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpNoteLabelActionPerformed
		// TODO add your handling code here:
    }//GEN-LAST:event_helpNoteLabelActionPerformed

    private void headerCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headerCheckBoxActionPerformed
		// TODO add your handling code here:
    }//GEN-LAST:event_headerCheckBoxActionPerformed

    private void OKOptionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKOptionsButtonActionPerformed
		String character = this.separatorTextField.getText();

		if (character.length() != 1) {
			JOptionPane.
				showMessageDialog(this, "Separator must be one character", "Error", JOptionPane.ERROR_MESSAGE);
			return;
		}

		String pattern = "[a-zA-Z0-9 ]";
		Pattern p = Pattern.compile(pattern, Pattern.CANON_EQ);

		Matcher matcher = p.matcher(character);

		if (matcher.find()) {
			JOptionPane.
				showMessageDialog(this, "Invalid character", "Error", JOptionPane.ERROR_MESSAGE);
		} else {
			String path = this.filePathlabel.getText();

			if (!path.isEmpty()) {
				try {
					cells = uiController.focusOwner.getSelectedCells();
					if (!controller.hasEnoughCells(path, character, cells)) {
						int option = JOptionPane.
							showConfirmDialog(this, "The file exceeds the selected cells. Continue?", "Warning", JOptionPane.WARNING_MESSAGE);
						if (option == JOptionPane.NO_OPTION || option == JOptionPane.CANCEL_OPTION) {
							return;
						}
					}
					cells = controller.
						parse(path, character, this.headerCheckBox.
							  isSelected(), cells);
					updateSelectedCells();
				} catch (FormulaCompilationException ex) {
					Logger.getLogger(SharePanel.class.getName()).
						log(Level.SEVERE, null, ex);
				}
			}
		}

    }//GEN-LAST:event_OKOptionsButtonActionPerformed

	private void updateSelectedCells() {
		this.uiController.focusOwner.
			setRowSelectionInterval(cells[0][0].getAddress().
				getRow(), cells[0][0].getAddress().getRow() + cells[0].length - 1);
		this.uiController.focusOwner.
			setColumnSelectionInterval(cells[0][0].getAddress().
				getColumn(), cells[0][0].
									   getAddress().
									   getColumn() + cells.length - 1);
	}

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
		// TODO add your handling code here:
    }//GEN-LAST:event_formMouseMoved

    private void helpNoteLabel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpNoteLabel1ActionPerformed
		// TODO add your handling code here:
    }//GEN-LAST:event_helpNoteLabel1ActionPerformed

    private void OKOptionsButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKOptionsButton1ActionPerformed

		this.cells = this.uiController.focusOwner.getSelectedCells();

		String path = this.filePathlabel1.getText();
		if (JOptionPane.
			showConfirmDialog(this, "Do you want to save the file here?",
							  "Confirm", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
			if (controller.exportFile(path, cells, this.separatorTextField1.
									  getText())) {
				JOptionPane.
					showMessageDialog(null, "The file was saved", "Sucess", JOptionPane.INFORMATION_MESSAGE);
			} else {
				JOptionPane.
					showMessageDialog(null, "Something went wrong", "Error", JOptionPane.ERROR_MESSAGE);
			}
		}
    }//GEN-LAST:event_OKOptionsButton1ActionPerformed

    private void headerCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_headerCheckBox1ActionPerformed
		// TODO add your handling code here:
    }//GEN-LAST:event_headerCheckBox1ActionPerformed

    private void exportFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportFileButtonActionPerformed
		JFileChooser jfc = new JFileChooser();
		jfc.setDialogTitle("Export File");
		if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
			String path = jfc.getSelectedFile().getAbsolutePath();
			this.filePathlabel1.setText(path);
		}
    }//GEN-LAST:event_exportFileButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OKOptionsButton;
    private javax.swing.JButton OKOptionsButton1;
    private javax.swing.JLabel charLabel;
    private javax.swing.JLabel charLabel1;
    private javax.swing.JButton exportFileButton;
    private javax.swing.JLabel filePathlabel;
    private javax.swing.JLabel filePathlabel1;
    private javax.swing.JCheckBox headerCheckBox;
    private javax.swing.JCheckBox headerCheckBox1;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JLabel headerLabel1;
    private javax.swing.JTextField helpNoteLabel;
    private javax.swing.JTextField helpNoteLabel1;
    private javax.swing.JButton importFileButton;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JLabel rangeOfCellsExportLabel;
    private javax.swing.JTextField rangeOfCellsExportText;
    private javax.swing.JLabel rangeOfCellsImportLabel;
    private javax.swing.JTextField rangeOfCellsImportText;
    private javax.swing.JTextField separatorTextField;
    private javax.swing.JTextField separatorTextField1;
    // End of variables declaration//GEN-END:variables

	@Override
	public void selectionChanged(SelectionEvent event) {
		//
	}

	@Override
	public void update(Observable o, Object object) {

	}
}
